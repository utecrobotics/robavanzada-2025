#!/usr/bin/env python3
import PyKDL as kdl
from urdf_parser_py.urdf import URDF
from kdl_parser_py.urdf import treeFromUrdfModel

if __name__ == '__main__':

 robot = URDF.from_xml_file('../urdf/ur5_robot.urdf')  # Indicar la definicion estructural y dinamica del robot.
 ok, tree = treeFromUrdfModel(robot)
 chain = tree.getChain("base_link", "ee_link") # Indicar donde empieza y termina la cadena cinematica.
 
 ik_solver = kdl.ChainIkSolverPos_LMA(chain) # Resolver la cinematica inversa.

 # pose, es la combinacion de posicion y orientacion del robot.
 target_pose = kdl.Frame(kdl.Rotation.RPY(0, 0, 0), kdl.Vector(0.5, 0.0, 0.5)) # Indicar la pose deseada.
 q_init = kdl.JntArray(chain.getNrOfJoints()) # Variable de la pose inicial, todo en cero para este caso.
 q_out = kdl.JntArray(chain.getNrOfJoints()) # Variable de la pose final, todo en cero para este caso.

 ik_solver.CartToJnt(q_init, target_pose, q_out) # Resolver la cinematica la posicion deseada.
 ql_out = [q_out[i] for i in range(q_out.rows())] # Convertir el resultado a tipo lista.
